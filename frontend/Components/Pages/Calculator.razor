@page "/calculator"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using frontend.Components
@using frontend.Services
@inject ICalculationService ICalculationService

<PageTitle>Calculator</PageTitle>

<h1>Roman Calculator</h1>

<p>This calculator allows you to perform operations on both integers and Roman numerals.</p>

<div style="background-color: #f5f5f5; border: 1px solid #000; padding: 24px; border-radius: 8px;">
<EditForm Model="@calcModel" OnValidSubmit="Calculate" Enhance>
    <DataAnnotationsValidator />
    <div>
        <label>First Number or Roman Numeral:</label>
        <InputText @bind-Value="calcModel.FirstNumber" class="form-control" />
        <ValidationMessage For="@(() => calcModel.FirstNumber)" class="text-danger" />
    </div>
    <div>
        <label>Operation:</label>
        <InputSelect @bind-Value="calcModel.Operation" class="form-control">
            <option value="+">+</option>
            <option value="-">-</option>
        </InputSelect> 
    </div>
    <div>
        <label>Second Number or Roman Numeral:</label>
        <InputText @bind-Value="calcModel.SecondNumber" class="form-control" />
        <ValidationMessage For="@(() => calcModel.SecondNumber)" class="text-danger" />
    </div>
    <button type="submit" class="btn btn-primary mt-2">Calculate</button>
</EditForm>
</div>

@if (result != null)
{
    <div style="background-color: #8bff95; border: 1px solid #000000; padding: 24px; border-radius: 8px;" class="mt-3">
        <strong>Result:</strong> @result
    </div>
}

@code {
    private CalculationModel calcModel = new();
    private string? result;

    private async Task Calculate()
    {
        result = await ICalculationService.Calculate(calcModel);
    }
}